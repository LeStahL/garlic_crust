use crate::garlic_crust::*;
use crate::garlic_helper::*;
use super::*;

// A garlic clove is basically a garlic crust "preset", i.e. its internal wiring

// the member fields. I think these might even be called CloveState here?
pub struct CloveState {
    pub output: BlockArray,
    pub volume: MonoSample,

    osc: oscillator::Oscillator,
    osc_output: Edge,

    freq_env: oscillator::Oscillator,
    freq_env_output: Edge,

    env: envelope::Envelope,
    env_output: Edge,

    lp: filter::Filter,
    lp_output: Edge,
}

pub fn create_state() -> CloveState {
    CloveState {
        output: EMPTY_BLOCKARRAY,
        volume: 0.08,

        osc: oscillator::Oscillator {
            shape: oscillator::BaseWave::Saw,
            freq_factor: Edge::constant(0.5),
            detune: Edge::constant_stereo([0.01,0.025]),
            phasemod: Edge::constant_stereo([-0.3,0.3]),
            ..Default::default()
        },
        osc_output: Edge::zero(),

        freq_env: oscillator::Oscillator {
            shape: oscillator::BaseWave::Saw,
            volume_factor: [0.3, 0.3],
            frequency: Edge::constant(0.013),
            phasemod: Edge::constant_stereo([0., 0.2]),
            ..Default::default()
        },
        freq_env_output: Edge::zero(),

        env: envelope::Envelope {
            shape: envelope::EnvShape::Common {
                base: envelope::BaseEnv::ExpDecay,
                attack: Edge::constant(0.1),
                decay: Edge::constant(0.4),
                sustain: Edge::constant(0.),
            },
            ..Default::default()
        },
        env_output: Edge::zero(),

        lp: filter::Filter {
            shape: filter::FilterType::LowPass,
            cutoff: Edge::constant(4000.),
            ..Default::default()
        },
        lp_output: Edge::zero(),
    }
}

/* process() is the heart of the Garlic Clove and will be generated by knober
 *
 * unclear: management of seq_cursor, output could also be in the GarlicClove1State. think about.
 * sequence would then have to be split into the blocks itself, but this could be done by garlic_extract. meh
 *
 */

#[inline]
pub fn process(sequence: &[SeqEvent], block_offset: usize, state: &mut CloveState) {

    process_operator_seq(&mut state.freq_env, &sequence, block_offset, &mut state.freq_env_output);
    state.osc.phasemod = state.freq_env_output;

    process_operator_seq(&mut state.env, &sequence, block_offset, &mut state.env_output);
    state.osc.volume = state.env_output;
    process_operator_seq(&mut state.osc, &sequence, block_offset, &mut state.osc_output);

    state.lp.input = state.osc_output;
    process_operator(&mut state.lp, &mut state.lp_output);

    math_overdrive_const(&mut state.lp_output, 3.);

    state.lp_output.write_to(&mut state.output, state.volume);
}
